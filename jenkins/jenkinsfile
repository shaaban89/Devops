def branchName      =  "main"
def gitUrl          =  "git@github.com:shaaban89/Devops.git"
def serviceName     =  "wordpress-dev"
def EnvName         =  "wordpress-env"
def imageTag        =  "${EnvName}-${BUILD_NUMBER}"
def registryUrl     =  "https://registry.hub.docker.com"
def namespace       =  "dev"
def helmDir         =  "/home/dev/Devops/helm_charts/"
def dockerfile      =  "Dockerfile"

// Define the notifyBuild function (commented out for now)
// def notifyBuild(String status) {
//     def subject = "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
//     def summary = "${subject} (${env.BUILD_URL})"
//     def details = "Build result: ${currentBuild.result ?: 'SUCCESS'}"
    
//     emailext (
//         subject: subject,
//         body: "${summary}\n\n${details}",
//         recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
//     )
// }

node("wordpress-dev") {
    try {
        // Notification for build start (commented out for now)
        // notifyBuild('STARTED')

        stage('Prepare Workspace') {
            // Change the ownership of the workspace to the 'dev' user
            sh "sudo chown -R dev:dev ${env.WORKSPACE}"
        }

        stage('Setup Parameters') {
            script {
                properties([
                    parameters([
                        string(
                            defaultValue: 'main',
                            name: 'branchName',
                            trim: true
                        )
                    ])
                ])
            }
        }

        stage('Get the App Code') {
            // Ensure SSH key setup
            sh """
            sudo -u dev sh -c '
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                eval \$(ssh-agent -s)
                ssh-add ~/.ssh/id_rsa
            '
            """

            // Run all commands as the 'dev' user
            sh """
            sudo -u dev sh -c '
                whoami
                cd ${env.WORKSPACE}
                if [ ! -d .git ]; then
                    git init
                    git remote add origin ${gitUrl}
                fi
                git fetch origin
                git reset --hard origin/${branchName} || git checkout -b ${branchName} origin/${branchName}
                pwd
                ls -la
            '
            """
        }

        stage('Build Docker Image') {
            sh "sudo -u dev docker build -t ${serviceName}:${imageTag} -f ${dockerfile} /home/dev/workspace/docker"
        }

        stage('Push Docker Image') {
            docker.withRegistry(registryUrl, 'dockerhub-credentials') {
                docker.image("${serviceName}:${imageTag}").push()
            }
        }

        stage('Deploy to Kubernetes') {
            sh """
            sudo -u dev helm upgrade --install -n ${namespace} ${serviceName} ${helmDir} --set image.repository=${registryUrl}/${serviceName} --set image.tag=${imageTag} --set namespace=${namespace}
            sudo -u dev kubectl -n ${namespace} rollout status deploy/${serviceName}
            """
        }

        stage('Remove Local Images') {
            sh "sudo -u dev docker rmi -f ${serviceName}:${imageTag}"
            sh "sudo -u dev docker rmi -f ${registryUrl}/${serviceName}:${imageTag}"
        }

        // Clean workspace if needed
        stage('Cleanup') {
            cleanWs()
        }

    } catch (Exception e) {
        // Handle any exceptions that occur during the stages
        echo "Caught an exception: ${e.message}"
        currentBuild.result = 'FAILURE'
        // notifyBuild('FAILED') (commented out for now)
    } finally {
        // Ensure final notification is sent
        // notifyBuild(currentBuild.result ?: 'SUCCESS') (commented out for now)
    }
}

