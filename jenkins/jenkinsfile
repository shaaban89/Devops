def branchName      =  "main"
def gitUrl          =  "git@github.com:shaaban89/Devops.git"
def gitUrlCode      =  "git@github.com:shaaban89/msadnet"
def serviceName     =  "wordpress-dev"
def EnvName         =  "wordpress-env"
def imageTag        =  "${EnvName}-${BUILD_NUMBER}"
def registryUrl     =  "https://registry.hub.docker.com"
def k8sContext      =  "wordpress-dev"
def namespace       =  "dev"
def helmDir         =  "/home/dev/Devops/helm_charts/"
def dockerfile      =  "Dockerfile"

node("etmanaplus") {
    try {
        // Notification for build start
        notifyBuild('STARTED')

        stage('Prepare Workspace') {
            // Change the ownership of the workspace to the 'dev' user
            sh "sudo chown -R dev:dev ${env.WORKSPACE}"
        }

        stage('Setup Parameters') {
            script {
                properties([
                    parameters([
                        string(
                            defaultValue: 'main',
                            name: 'branchName',
                            trim: true
                        )
                    ])
                ])
            }
        }

        stage('Get the App Code') {
            // Run all commands as the 'dev' user
            sh """
            sudo -u dev sh -c '
                whoami
                cd /home/dev && git pull
                cd ${env.WORKSPACE}
                git init
                git remote add origin ${gitUrl}
                git fetch origin
                git checkout -b ${branchName} --track origin/${branchName}
                pwd
                ls -la
            '
            """
        }

        stage('Build Docker Image') {
            sh "sudo -u dev docker build -t ${serviceName}:${imageTag} -f ${dockerfile} ."
        }

        stage('Push Docker Image') {
            docker.withRegistry(registryUrl, 'dockerhub-credentials') {
                docker.image("${serviceName}:${imageTag}").push()
            }
        }

        stage('Deploy to Kubernetes') {
            sh """
            sudo -u dev helm upgrade --install -n ${namespace} ${serviceName} ${helmDir} --set image.repository=${registryUrl}/${serviceName} --set image.tag=${imageTag} --set namespace=${namespace}
            sudo -u dev kubectl -n ${namespace} rollout status deploy/${serviceName}
            """
        }

        stage('Remove Local Images') {
            sh "sudo -u dev docker rmi -f ${serviceName}:${imageTag}"
            sh "sudo -u dev docker rmi -f ${registryUrl}/${serviceName}:${imageTag}"
        }

        // Clean workspace if needed
        stage('Cleanup') {
            cleanWs()
        }

    } catch (Exception e) {
        // Handle any exceptions that occur during the stages
        echo "Caught an exception: ${e.message}"
        currentBuild.result = 'FAILURE'
        notifyBuild('FAILED')
    } finally {
        // Ensure final notification is sent
        notifyBuild(currentBuild.result ?: 'SUCCESSFUL')
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    // Default values
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        colorCode = '#00FF00'
    }
    // Send notifications
    slackSend(color: colorCode, message: summary)
}
